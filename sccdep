#!/bin/bash

check_merge_conflicts() {
  if git status -s | grep -q '^UU'
  then
    echo You have a merge conflict to resolve.
    exit 1
  fi
}

# Is there a branch name given
if [ $# -lt 1 ]; then 
  echo Cannot deploy: No branch name given.
  exit 1
fi
release_branch=$1

deploy_branches=()
deploy_env=""
# Is there a branch name given
if  [[ -z $2 || "$2" == "dev" ]]; then
  deploy_env="dev"
  deploy_branches=(master development autotest)
  echo This will merge $release_brach into master, development, and autotest
elif [ "$2" == "staging" ]; then
  deploy_env=$2
  deploy_branches=($deploy_env)
  echo This will merge $release_brach into staging
else
  echo Cannot deploy: Deployment environment not recognized.
  exit 1
fi

if git checkout $release_branch; then
  
  echo Pulling latest changes on branch $release_branch ...
  git pull origin $release_branch
  check_merge_conflicts
  git push origin $release_branch
  
  for b in "${deploy_branches[@]}"
  do
    git checkout $b
    echo Pulling latest changes on branch $b ...
    git pull origin $b
    echo Merging branch $release_branch into branch $b  ...
    if [ "$b" == "development" ]; then
      git merge master
    else
      git merge $release_branch
    fi
    check_merge_conflicts
    git push origin $b
  done
  
  git checkout $release_branch
  echo Deploying SCC branch $release_branch to $deploy_env server...
  bundle exec cap deploy $deploy_env
  if [ "$deploy_env" == "dev" ]; then
    echo Deploying SCC branch $release_branch to autotest server...
    bundle exec cap deploy autotest
  fi
fi